#!/usr/bin/env python3
"""
Script d'installation et de v√©rification du syst√®me BOM
V√©rifie les d√©pendances, installe les packages manquants, et teste le syst√®me
"""

import sys
import subprocess
import importlib
import os
from datetime import datetime

def print_banner():
    """Affiche la banni√®re du script"""
    print("=" * 60)
    print("üîß INSTALLATION ET V√âRIFICATION SYST√àME BOM")
    print("=" * 60)
    print(f"Python: {sys.version}")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

def check_python_version():
    """V√©rifie la version de Python"""
    print("\nüêç V√©rification de la version Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        print(f"Version actuelle: {sys.version}")
        return False
    else:
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True

def install_package(package_name):
    """
    Installe un package Python
    
    Args:
        package_name (str): Nom du package √† installer
        
    Returns:
        bool: True si installation r√©ussie
    """
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
        return True
    except subprocess.CalledProcessError:
        return False

def check_and_install_dependencies():
    """V√©rifie et installe les d√©pendances"""
    print("\nüì¶ V√©rification des d√©pendances...")
    
    # Liste des packages requis avec leurs noms d'import
    required_packages = {
        'pandas': 'pandas>=2.0.0',
        'openpyxl': 'openpyxl>=3.1.0',
        'numpy': 'numpy>=1.24.0',
        'streamlit': 'streamlit>=1.28.0'
    }
    
    missing_packages = []
    
    for import_name, package_spec in required_packages.items():
        try:
            importlib.import_module(import_name)
            print(f"‚úÖ {import_name}")
        except ImportError:
            print(f"‚ùå {import_name} - manquant")
            missing_packages.append(package_spec)
    
    # Installer les packages manquants
    if missing_packages:
        print(f"\nüîÑ Installation de {len(missing_packages)} package(s) manquant(s)...")
        
        for package in missing_packages:
            print(f"Installation de {package}...")
            if install_package(package):
                print(f"‚úÖ {package} install√©")
            else:
                print(f"‚ùå √âchec installation {package}")
                return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def check_project_structure():
    """V√©rifie la structure du projet"""
    print("\nüìÅ V√©rification de la structure du projet...")
    
    required_files = [
        'src/__init__.py',
        'src/bom_status_updater.py',
        'src/bom_comparator.py',
        'src/master_bom_processor.py',
        'config/bom_config.py',
        'bom_update_main.py',
        'example_usage.py',
        'requirements.txt'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - manquant")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è {len(missing_files)} fichier(s) manquant(s)")
        return False
    
    print("‚úÖ Structure du projet correcte")
    return True

def test_imports():
    """Teste les imports des modules principaux"""
    print("\nüîç Test des imports...")
    
    modules_to_test = [
        'src.bom_status_updater',
        'src.bom_comparator',
        'src.master_bom_processor',
        'config.bom_config'
    ]
    
    for module_name in modules_to_test:
        try:
            importlib.import_module(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name} - {str(e)}")
            return False
    
    print("‚úÖ Tous les imports r√©ussis")
    return True

def test_basic_functionality():
    """Teste les fonctionnalit√©s de base"""
    print("\n‚öôÔ∏è Test des fonctionnalit√©s de base...")
    
    try:
        from src.bom_status_updater import BOMStatusUpdater
        from config.bom_config import get_config
        
        # Test d'initialisation
        updater = BOMStatusUpdater()
        print("‚úÖ Initialisation BOMStatusUpdater")
        
        # Test de configuration
        config = get_config('columns')
        if config and 'part_number' in config:
            print("‚úÖ Configuration charg√©e")
        else:
            print("‚ùå Probl√®me de configuration")
            return False
        
        # Test des m√©thodes utilitaires
        import pandas as pd
        test_df = pd.DataFrame({'Part Number': ['PN001'], 'Projet': ['TEST']})
        
        pn_col = updater._find_column(test_df, updater.possible_pn_names)
        if pn_col == 'Part Number':
            print("‚úÖ D√©tection de colonnes")
        else:
            print("‚ùå Probl√®me d√©tection colonnes")
            return False
        
        print("‚úÖ Fonctionnalit√©s de base op√©rationnelles")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test fonctionnalit√©s: {str(e)}")
        return False

def run_example_test():
    """Ex√©cute un test d'exemple simple"""
    print("\nüß™ Test d'exemple...")
    
    try:
        # Importer et ex√©cuter le test rapide
        import test_bom_system
        
        if test_bom_system.run_quick_test():
            print("‚úÖ Test d'exemple r√©ussi")
            return True
        else:
            print("‚ùå Test d'exemple √©chou√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test d'exemple: {str(e)}")
        return False

def create_sample_config():
    """Cr√©e un fichier de configuration d'exemple"""
    print("\nüìù Cr√©ation de la configuration d'exemple...")
    
    config_content = """# Configuration personnalis√©e pour votre environnement
# Copiez ce fichier vers config/user_config.py et modifiez selon vos besoins

# Chemins par d√©faut
DEFAULT_MASTER_BOM = "master_bom_cleaned.xlsx"
DEFAULT_OUTPUT_DIR = "output"

# Noms de colonnes sp√©cifiques √† votre organisation
CUSTOM_COLUMN_NAMES = {
    'part_number': ['Part Number', 'PN', 'Votre_Nom_PN'],
    'project': ['Projet', 'Project', 'Votre_Nom_Projet'],
    'status': ['Statut', 'Status', 'Votre_Nom_Statut']
}

# Couleurs personnalis√©es
CUSTOM_COLORS = {
    'error': 'FF9999',    # Rouge plus vif
    'warning': 'FFCC99',  # Orange plus vif
    'success': 'CCFF99'   # Vert plus vif
}
"""
    
    try:
        os.makedirs('config', exist_ok=True)
        with open('config/user_config_example.py', 'w', encoding='utf-8') as f:
            f.write(config_content)
        print("‚úÖ Configuration d'exemple cr√©√©e: config/user_config_example.py")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation config: {str(e)}")
        return False

def display_usage_instructions():
    """Affiche les instructions d'utilisation"""
    print("\n" + "="*60)
    print("üìã INSTRUCTIONS D'UTILISATION")
    print("="*60)
    
    instructions = """
üöÄ D√âMARRAGE RAPIDE:

1. Mode interactif (recommand√© pour d√©buter):
   python bom_update_main.py

2. Mode ligne de commande:
   python bom_update_main.py --cleaned-file "fichier.xlsx" --master-bom "master.xlsx"

3. Interface web Streamlit:
   streamlit run app.py

4. Ex√©cuter les exemples:
   python example_usage.py

5. Tests complets:
   python test_bom_system.py

üìÅ FICHIERS REQUIS:
   - Fichier Excel nettoy√© (avec colonnes PN et Projet)
   - Master BOM (avec colonnes PN, Projet, Statut)

üéØ R√âSULTATS:
   - Update_[date].xlsx : Fichier mis √† jour
   - Rapport_[date].xlsx : Rapport d√©taill√©
   - Master BOM mis √† jour automatiquement

üí° AIDE:
   python bom_update_main.py --help-detailed
"""
    
    print(instructions)

def main():
    """Fonction principale"""
    print_banner()
    
    success = True
    
    # V√©rifications et installations
    checks = [
        ("Version Python", check_python_version),
        ("D√©pendances", check_and_install_dependencies),
        ("Structure projet", check_project_structure),
        ("Imports modules", test_imports),
        ("Fonctionnalit√©s base", test_basic_functionality),
        ("Test exemple", run_example_test),
        ("Configuration exemple", create_sample_config)
    ]
    
    for check_name, check_func in checks:
        if not check_func():
            print(f"\n‚ùå √âchec: {check_name}")
            success = False
            break
    
    # R√©sultat final
    print("\n" + "="*60)
    if success:
        print("üéâ INSTALLATION ET V√âRIFICATION R√âUSSIES!")
        print("‚úÖ Le syst√®me BOM est pr√™t √† √™tre utilis√©")
        display_usage_instructions()
    else:
        print("üí• √âCHEC DE L'INSTALLATION/V√âRIFICATION")
        print("‚ùå Veuillez corriger les erreurs avant de continuer")
    print("="*60)

if __name__ == "__main__":
    main()
